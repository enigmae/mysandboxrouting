{"version":3,"sources":["Controls/enterLocationControl.tsx","Controls/locationRiderControl.tsx","Controls/locationRiderCollectionControl.tsx","Controls/itineraryInstructionsControl.tsx","Controls/instructionSummaryControl.tsx","Services/itinerary.ts","Services/ItineraryService.ts","Services/ItineraryCollectionService.ts","Controls/itinerariesControl.tsx","Controls/BusCapacityControl.tsx","Controls/LandingPageControl.tsx","index.tsx"],"names":["_callee","query","rest","response","regenerator_default","a","wrap","_context","prev","next","console","log","rm","get","sent","abrupt","result","resourceSets","resources","stop","SearchParam","SearchResult","Riders","Coords","StartTime","EndTime","Object","classCallCheck","this","EnterLocationControl","_React$Component","props","_this","possibleConstructorReturn","getPrototypeOf","call","inputElement","handleKeyDown","event","key","preventDefault","stopPropagation","blur","state","SearchQuery","setState","SearchResultVisible","handleSearchChanged","bind","assertThisInitialized","handleSearchBlur","searchResult","coords","Lat","Long","inherits","createClass","value","focus","_this2","LastQuery","target","getBingMapsResponse","then","i","JSON","stringify","undefined","name","point","coordinates","noticedChange","Submitted","searchResultsChanged","_this3","react","type","readOnly","onChange","onBlur","onKeyDown","ref","input","React","LocationRiderControl","handleRidersChanged","handleAddLocationClicked","handleSearchResultChanged","NumRiders","SubmitEnabled","e","resetSubmitEnabled","notifySubmitLocationRider","submitLocationRider","enterLocationControl_EnterLocationControl","style","display","className","onClick","disabled","visibility","LocationRiderCollectionControl","LocationRiders","Array","handleLocationRiderChanged","handleSubmitRider","locationRider","locationRiders","push","handleLocationRidersChanged","items","locationRiderControl_LocationRiderControl","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","err","return","HoursMinutes","totalMinutes","hours","minutes","Math","floor","round","ItineraryInstructionsControl","apply","arguments","date","Date","fixPM","toLocaleDateString","toLocaleTimeString","includes","replace","minHoursMinutes","condensedInstructions","minRouteTime","maxHoursMinutes","maxRouteTime","fullSummary","concat","minDistance","toFixed","maxDistance","instructionRenders","linq","toArray","map","quantity","agent","location","arrive","leave","miles","formatDate","startTime","formatTime","endTime","passengers","InstructionSummaryControl","objectSpread","collapsed","calculateState","startingPoint","totalHours","condensedInstructionSet","durationMinutes","totalDistance","totalMiles","calc","citiesMissed","missedCities","length","missed","city","riders","substr","numAgents","Collapsible_default","trigger","itineraryInstructionsControl_ItineraryInstructionsControl","dateDiff","require","itineraryItem","dwellTime","openingTime","closingTime","startingTime","endLocationName","agentNames","Set","add","size","instructionSet","agentItinerary","instructions","distance","calcdistance","calcMinutes","adjustTimeFormat","instructionType","Enumerable","skip","sum","instruction","condensed","mileCount","first","index","visit","arrival","ItinineraryResponse","destinationName","instructionSets","citiesVisited","agentItineraries","where","instructionsSetsLinq","orderedInstructions","selectMany","orderBy","distinct","unscheduledItems","select","duration","max","min","dt","getTime","groupBy","forEach","condensedInstructionAgent","lastInstruction","last","diff","condensedInstruction","addmin","add_minutes","dateformat","ItineraryRequest","agents","itineraryItems","ItineraryService","semaphore","Semaphore","_getItinerary","asyncToGenerator","mark","_callee2","getItineraryRequest","maxAgents","agentCount","release","itineraryResponse","callbackUrl","callbackTimeout","promiseGetResponse","_context2","searchParams","sr","latitude","longitude","capacity","busCapacity","shifts","endLocation","startLocation","acquire","request","resolveWithFullResponse","json","callbackInSeconds","Promise","resolve","reject","wait","onTimeout","_ref","parse","setTimeout","clearTimeout","finally","_x","ItineraryCollectionService","itinerary","getItinerariesRequest","additionalStops","searchResults","numAdditionalStops","leftOver","additionalStop","addStops","_getItineraries","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_itinerary","responses","keys","responsesFiltered","_i","_responses","_response","returnedValue","addExtraStops","minBuses","maxBuses","getItinerary","t0","finish","all","m","r","has","itineraries","orderByDescending","thenBy","ItinerariesControl","endOfToday","dateMath","ninePm","subtractDay","Arrivaltime","handleArrivalTimeChanged","ItinerariesResponse","responseList","instructionList","instructionSummaryControl_InstructionSummaryControl","BusCapacityControl","handleBusCapacityChanged","handleAddBus","capacities","Guid","create","toString","cap","update","defineProperty","$set","$push","_this4","numericInputs","react_numeric_input","LandingPageControl","itineraryCollection","searchResultHashmap","handleDestinationChanged","DwellTime","initializeArrivalTime","MinBuses","MaxBuses","BusCapacity","Loading","CanSubmit","handleDwellTimeChanged","handleMultipleItinerarySearch","handleSearchItineraries","handleReadjustForArrival","handleMinBusesChanged","handleMaxBusesChanged","handleBusCapacitiesChanged","entry_default","BusCapacityControl_BusCapacityControl","locationRiderCollectionControl_LocationRiderCollectionControl","itinerariesControl_ItinerariesControl","BusCapacities","from","val","SearchResults","Destination","research","existingDuration","it","readjustForArrival","skipReadjust","getItineraries","is","handleReadjustForArrivalBySubtractDuration","rootElement","document","getElementById","render","LandingPageControl_LandingPageControl"],"mappings":"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","file":"static/js/main.4b50de5c.chunk.js","sourcesContent":["import * as rm from \"typed-rest-client/RestClient\";\nimport * as React from \"react\";\nimport \"../styles.css\";\nimport { IBingMapsResponse, IResource } from \"../bing\";\n\nasync function getBingMapsResponse(query: string): Promise<IResource> {\n  console.log(\"running search\");\n  let rest = new rm.RestClient(\"rest-samples\", \"https://dev.virtualearth.net\");\n  let response: rm.IRestResponse<IBingMapsResponse> = await rest.get<\n    IBingMapsResponse\n  >(\n    \"/REST/v1/Locations?q=\" +\n      query +\n      \"&key=ArLJodQ7fEaQ2dfy3lIHWJrJILC35_Qj0EpT8TCy3ls96pl6sqCdlu18bo8j_tbM\"\n  );\n  // console.log(\"the response:\" + JSON.stringify(response));\n  return response.result!.resourceSets[0].resources[0];\n}\n\ninterface IEnterLocationState {\n  SearchQuery?: string;\n  SearchResult: string;\n  SearchResultVisible: boolean;\n  Coords: ILatLong;\n  LastQuery?: string;\n  Submitted?: boolean;\n}\nexport interface ILatLong {\n  Lat: number;\n  Long: number;\n}\nexport interface ISearchResult {\n  SearchResult?: string;\n  SearchQuery?: string;\n  Coords?: ILatLong;\n}\nexport interface ISearchParam extends ISearchResult{\n  EndTime?:Date;\n  StartTime?:Date;\n  Riders?:number;\n}\nexport class SearchParam implements ISearchParam{\n  constructor(public SearchResult:string, public Riders:number, public Coords:ILatLong, public StartTime?:Date, public EndTime?:Date){\n\n  }\n}\nexport interface IEnterLocationControlProps {\n  searchResultsChanged: (arg0: ISearchResult) => void;\n  SearchResult: ISearchResult;\n}\nexport class EnterLocationControl extends React.Component<\n  IEnterLocationControlProps,\n  IEnterLocationState\n> {\n  constructor(props: Readonly<IEnterLocationControlProps>) {\n    super(props);\n    this.handleSearchChanged = this.handleSearchChanged.bind(this);\n    this.handleSearchBlur = this.handleSearchBlur.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    let searchResult = '';\n    let coords = {Lat:0, Long:0};\n    if(props.SearchResult){\n      if(props.SearchResult.SearchResult)\n        searchResult = props.SearchResult.SearchResult;\n      if(props.SearchResult.Coords)\n        coords = props.SearchResult.Coords;\n    }\n    this.state = {\n      SearchResultVisible: false,\n      SearchQuery: props.SearchResult ? props.SearchResult.SearchQuery : \"\",\n      SearchResult: searchResult,\n      Coords: coords\n    };\n    this.inputElement = null;\n  }\n  componentDidMount() {\n    this.inputElement!.focus();\n  }\n  inputElement:HTMLInputElement|null;\n  handleSearchChanged(event) {\n    this.setState({ LastQuery: this.state.SearchQuery });\n    console.log(\"handlesearch changed last query is \" + this.state.LastQuery);\n\n    this.setState({\n      SearchQuery: event.target.value,\n      SearchResultVisible: true\n    });\n    getBingMapsResponse(event.target.value).then(i => {\n\n      console.log(\"last query is \" + this.state.LastQuery);\n      console.log(\"maps Response: \" + JSON.stringify(i));\n      if(i===undefined)\n        return;\n      this.setState({\n        SearchResult: i.name,\n        Coords: { Lat: i.point.coordinates[0], Long: i.point.coordinates[1] }\n      });\n    });\n  }\n  noticedChange(): boolean {\n    console.log(\"last query is \" + this.state.LastQuery);\n    console.log(\"search query is \" + this.state.SearchQuery);\n    console.log(\"search result is \" + this.state.SearchResult);\n    if (this.state.LastQuery !== this.state.SearchQuery) {\n      this.setState({ LastQuery: this.state.SearchQuery });\n\n      console.log(\"noticed change to \" + this.state.LastQuery);\n      return true;\n    } else {\n      console.log(\"noticed no change\");\n      return false;\n    }\n  }\n \n  handleSearchBlur(event){\n    if (!this.noticedChange()) return;\n    let searchResult =\n      this.state.SearchQuery === \"\" ? \"\" : this.state.SearchResult;\n    this.setState({\n      SearchQuery: searchResult,\n      SearchResultVisible: false\n    });\n    this.setState({ LastQuery: searchResult });\n    if (searchResult === \"\") return;\n    this.setState({\n      Submitted: true\n    });\n    this.props.searchResultsChanged({\n      SearchResult: searchResult,\n      Coords: this.state.Coords,\n      SearchQuery: this.state.SearchQuery\n    });\n  }\n  handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>): void => {\n    // 'keypress' event misbehaves on mobile so we track 'Enter' key via 'keydown' event\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      event.stopPropagation();\n      this.inputElement!.blur();\n      //this.handleSearchBlur(null);\n    }\n    if (this.state.SearchQuery === \"\") {\n      this.setState({ SearchResultVisible: false });\n    }\n  };\n  render() {\n    let searchResult;\n    if (this.state.SearchResultVisible) {\n      searchResult = (\n        <div>\n        <input type=\"text\" value={this.state.SearchResult} readOnly={true} />\n        <br/>\n        </div>\n        );\n    }\n    return (\n      <span>\n        <input\n          type=\"text\"\n          value={this.state.SearchQuery}\n          onChange={this.handleSearchChanged}\n          onBlur={this.handleSearchBlur}\n          onKeyDown={this.handleKeyDown}\n          ref={input => (this.inputElement = input)}\n        />\n        {searchResult}\n        </span>\n    );\n  }\n}\n","import * as React from 'react';\nimport { EnterLocationControl, ISearchParam, ISearchResult, ILatLong } from './enterLocationControl';\nimport { ILocation } from '../bing';\nexport interface ILocationRider {\n    SearchResult?: string;\n    NumRiders?:number;\n    Coords?:ILatLong;\n  }\n  export interface ILocationRiderControlState extends ILocationRider{\n    SubmitEnabled:boolean;\n    Submitted:boolean;\n  }\n  export interface ILocationRiderControlProps {\n    handleLocationRiderChanged?: (locationRider: ILocationRider) => void;\n    submitLocationRider:(locationRider: ILocationRider)=>void;\n    NumRiders?:number;\n    SearchResult?:string;\n  }\nexport class LocationRiderControl extends React.Component< ILocationRiderControlProps,\nILocationRiderControlState>{\n  constructor(props:Readonly<ILocationRiderControlProps>){\n    super(props);\n    this.handleRidersChanged = this.handleRidersChanged.bind(this);\n    this.handleAddLocationClicked = this.handleAddLocationClicked.bind(this);\n    this.handleSearchResultChanged = this.handleSearchResultChanged.bind(this);\n    this.state = {NumRiders:props.NumRiders, SearchResult:props.SearchResult, SubmitEnabled:false, Submitted:false};\n  }\n  handleRidersChanged(e){\n    this.setState({NumRiders:e.target.value}, this.resetSubmitEnabled);\n  }\n  handleSearchResultChanged(e: ISearchResult) {\n        console.log(\"handleSearchResultsChanged \");\n        this.setState({ SearchResult: e.SearchResult, Coords:e.Coords!}, this.resetSubmitEnabled);\n        if(this.state.Submitted){\n          this.notifySubmitLocationRider();\n        }\n      }\n  handleAddLocationClicked(){\n    this.notifySubmitLocationRider();\n    this.setState({Submitted:true});\n  }\n  notifySubmitLocationRider(){\n         this.props.submitLocationRider(this.state);\n  }\n  resetSubmitEnabled(){\n    if(this.state.NumRiders && this.state.SearchResult){\n      this.setState({SubmitEnabled:true});\n    }\n  }\n    render(){\n        return <table>\n          <td></td>\n          <td></td>\n        <tr>\n         <EnterLocationControl\n          SearchResult={{\n            SearchQuery: \"\",\n            SearchResult: this.state.SearchResult\n          }}\n          searchResultsChanged={this.handleSearchResultChanged}\n        />\n        <div style={{display:\"inline-block\"}}>\n        <label className=\"RidersLabel\"># Riders</label><input className=\"Riders\" value={this.state.NumRiders} onChange={this.handleRidersChanged}/>\n        <button className=\"AddLocation\" onClick={this.handleAddLocationClicked} disabled={!this.state.SubmitEnabled} style={{visibility:this.state.Submitted ? 'hidden':'visible'}}>Add location</button>\n        </div></tr></table>\n    }\n}","import { EnterLocationControl, ISearchResult, ISearchParam } from \"./enterLocationControl\";\nimport * as React from \"react\";\nimport { LocationRiderControl, ILocationRider } from \"./locationRiderControl\";\n\nexport interface ILocationRiderCollectionControlProps{\nhandleLocationRidersChanged:(locationRiders:ILocationRider[])=>void;\n}\nexport interface ILocationRiderCollectionControlState{\n  LocationRiders:ILocationRider[];\n}\nexport class LocationRiderCollectionControl extends React.Component<ILocationRiderCollectionControlProps, ILocationRiderCollectionControlState> {\n  constructor(props: Readonly<ILocationRiderCollectionControlProps>) {\n    super(props);\n    this.state = { LocationRiders: new Array() };\n    this.handleLocationRiderChanged = this.handleLocationRiderChanged.bind(this);\n    this.handleSubmitRider = this.handleSubmitRider.bind(this);\n  }\n  \n  handleLocationRiderChanged(locationRider: ILocationRider){\n\n  }\nhandleSubmitRider(locationRider: ILocationRider){\n  var locationRiders = this.state.LocationRiders;\n  locationRiders.push(locationRider);\n  this.setState({LocationRiders:locationRiders}, ()=> this.props.handleLocationRidersChanged(this.state.LocationRiders));\n}\n  render() {\n    let blankitem = (\n      <LocationRiderControl\n      submitLocationRider={(e)=>this.handleSubmitRider(e)}\n       handleLocationRiderChanged={this.handleLocationRiderChanged}\n     />\n  );\n    const items = [blankitem];\n    for (let locationRider of this.state.LocationRiders) {\n      items.push(<LocationRiderControl NumRiders={locationRider.NumRiders} SearchResult={locationRider.SearchResult}\n        submitLocationRider={(e)=>this.handleSubmitRider(e)}\n        />);\n    }\n    return <ol>{items}</ol>;\n  }\n}\n","import * as React from \"react\";\nimport { instruction, instructionSet, condensedInstruction, condensedInstructionSet } from \"../Services/itinerary\";\nimport * as linq from \"linq\";\nexport interface InstructionControlProps{\n    condensedInstructions:condensedInstructionSet;\n}\nclass HoursMinutes{\n    hours:number;\n    minutes:number;\n    constructor(totalMinutes:number){\n        this.hours = Math.floor(totalMinutes/60);\n        this.minutes = Math.round(totalMinutes%60+0);\n    }\n}\nexport class ItineraryInstructionsControl extends React.Component<InstructionControlProps>{\n  formatDate(date:string){\n    if(!date)\n    return '';\n    return new Date(this.fixPM(date)).toLocaleDateString();\n  }\n  formatTime(date:string){\n    if(!date)\n    return '';\n    return new Date(this.fixPM(date)).toLocaleTimeString();\n  }\n  fixPM(date:string){\n    if(date.includes('P')){\n      return date.replace('P', ' ')+' PM';\n      }\n      return date;\n  }\n    render(){\n      let minHoursMinutes = new HoursMinutes(this.props.condensedInstructions.minRouteTime);\n        let maxHoursMinutes = new HoursMinutes(this.props.condensedInstructions.maxRouteTime);\n         let fullSummary = `Min Dist:${this.props.condensedInstructions.minDistance.toFixed(1)} mi Max Dist:${this.props.condensedInstructions.maxDistance.toFixed(1)} mi Min Time:${minHoursMinutes.hours} hrs ${minHoursMinutes.minutes} min Max Time:${maxHoursMinutes.hours} hrs ${maxHoursMinutes.minutes} min`;\n       \n        let instructionRenders = linq.from(this.props.condensedInstructions.condensedInstructions).toArray().map(\n            (i) => {\n              let loc;\n              let place;\n              let endtime;\n              let duration;\n              let quantity;\n              let agent;\n              let location;\n              let arrive;\n              let leave;\n              let miles;\n              agent = <td>{i.agent}</td>;\n              location = <td>{i.location}</td>;\n              arrive = <td>{this.formatDate(i.startTime)}&nbsp;{this.formatTime(i.startTime)}</td>;\n              leave = <td>{i.endTime ? this.formatDate(i.endTime) :''}&nbsp;{i.endTime ? this.formatTime(i.endTime) :''}</td>;\n              quantity =<td>{i.passengers}</td>;\n              miles = <td>{i.miles.toFixed(2)}</td>;\n              return <tr>{agent}{location}{arrive}{leave}{quantity}{miles}</tr>;\n            }\n          );\n        return <div>\n        <h3>{fullSummary}</h3>\n        <table>\n    <tr>\n    <th>Agent</th>\n    <th>Location</th>\n    <th>Arrive</th>\n    <th>Leave</th>\n    <th># Riders</th>\n    <th>Miles</th>\n  </tr>\n    {instructionRenders}\n    </table></div>\n    }\n}","import * as React from 'react';\nimport { instructionSet, condensedInstructionSet } from '../Services/itinerary';\nimport { totalmem } from 'os';\nimport { ItineraryInstructionsControl } from './itineraryInstructionsControl';\nimport Collapsible from 'react-collapsible';\nexport interface IInstructionSummaryControlProps{\n    condensedInstructionSet:condensedInstructionSet;\n}\nexport interface IInstructionSummaryControlState{\n    collapsed?:boolean;\n    totalHours:number;\n    totalMinutes:number;\n    totalDistance:number;\n    startingPoint:string;\n}\n\nexport class InstructionSummaryControl extends React.Component<IInstructionSummaryControlProps, IInstructionSummaryControlState>{\n    constructor(props){\n        super(props);\n        let collapsed ={collapsed:true};\n \n        this.state = {...collapsed, ...this.calculateState(), startingPoint:''};\n    }\n    calculateState(){\n        let calc = {totalHours:Math.floor(this.props.condensedInstructionSet.durationMinutes/60), \n            totalMinutes:this.props.condensedInstructionSet.durationMinutes%60, totalDistance:this.props.condensedInstructionSet.totalMiles};\n        return calc;\n    }\n    componentDidUpdate(){\n        let calc = this.calculateState();\n            if(this.state.totalDistance!=calc.totalDistance || this.state.totalHours!=calc.totalHours || this.state.totalMinutes!=calc.totalMinutes){\n                this.setState(calc);        \n            }\n        }\n    render(){\n        let citiesMissed='';\n        if(this.props.condensedInstructionSet.missedCities && this.props.condensedInstructionSet.missedCities.length>0){\n            citiesMissed=' Cities Missed:[';\n            for(let missed of this.props.condensedInstructionSet.missedCities){\n                citiesMissed+=missed.city+` - Riders: ${missed.riders}, `;\n            }\n            citiesMissed = citiesMissed.substr(0, citiesMissed.length-2);\n            citiesMissed+=']';\n        }\n         \n        let fullSummary = `Total Time:${this.state.totalHours} hrs ${this.state.totalMinutes.toFixed()} min Total Distance:${this.props.condensedInstructionSet.totalMiles.toFixed(1)} mi #Buses:${this.props.condensedInstructionSet.numAgents} Min Dist:${this.props.condensedInstructionSet.minDistance.toFixed(1)} mi Max Dist:${this.props.condensedInstructionSet.maxDistance.toFixed(1)} mi ${citiesMissed}`;\n        return <Collapsible trigger={fullSummary}>\n                <ItineraryInstructionsControl condensedInstructions={this.props.condensedInstructionSet}/>\n            </Collapsible>\n    }\n}","import { ISearchResult, ILatLong, ISearchParam } from \"../Controls/enterLocationControl\";\nimport * as Enumerable from 'linq';\nimport * as addsubtractdate from 'add-subtract-date';\nimport dateformat from 'dateformat';\n\nvar dateDiff = require('date-diff');\nexport interface location {\n  latitude: number;\n  longitude: number;\n}\nexport interface shift {\n  startTime?: string;\n  endTime?: string;\n  startLocation: location;\n  endLocation: location;\n}\nexport interface IitineraryItem {\n  name: string;\n  dwellTime: string;\n  location: location;\n  quantity:Array<number>;\n}\nexport class itineraryItem implements IitineraryItem {\n  constructor(\n    public name: string,\n    public dwellTime: string,\n    public location: location,\n    public quantity:Array<number>,\n    public openingTime?:string,\n    public closingTime?:string,\n    public startingTime?:string,\n    \n  ) {}\n}\nexport interface agent {\n  name: string;\n  capacity:Array<number>;\n  shifts: shift[];\n}\nexport interface IItineraryRequest {\n  agents: agent[];\n  itineraryItems: IitineraryItem[];\n}\nexport interface route {\n  startLocation: Location;\n  endLocatrion: Location;\n  startTime: string;\n  endTime: string;\n  totalTravelDistance: number;\n  totalTravelTime: string;\n  wayPoints: Location[];\n}\nexport interface instruction {\n  instructionType: string;\n  distance: number;\n  itineraryItem: IitineraryItem;\n  startTime: string;\n  endTime: string;\n  duration: string;\n  pickupRiders:number;\n}\nexport interface missedCity{\n  city:string;\n  riders:number;\n}\nexport class condensedInstructionSet{\n  public totalMiles:number=0;\n  public numAgents:number;\n  \n  constructor(public condensedInstructions:condensedInstruction[], public  endLocationName:string, public durationMinutes:number, public minDistance:number,\n  public maxDistance:number,\n  public minRouteTime:number,\n  public maxRouteTime:number,\n  public missedCities?:Array<missedCity>\n  ){\n    let agentNames = new Set<string>();\n    \n    for(let i = 0; i<condensedInstructions.length;i++){\n      this.totalMiles+=condensedInstructions[i].miles;\n      agentNames.add(condensedInstructions[i].agent);\n    } \n    this.numAgents = agentNames.size;\n  }\n}\n/*\nexport class condensedInstructionSetCollection{\n  public \n  constructor(public condensedInstructionSets:condensedInstructionSet[]){\n   // this.condensedInstructionSets = Enumerable.from(this.condensedInstructionSets).selectMany(i=>i.condensedInstructions).orderBy(i=>i.startTime)\n  }\n}*/\nexport interface condensedInstruction{\n  agent:string;\n  startTime: string;\n  endTime?: string;\n  miles:number;\n  location:string;\n  passengers:number;\n}\nexport class instructionSet{\n  constructor(agentItinerary:agentItinerary, public endLocationName:string){\n    this.instructions = agentItinerary.instructions;\n    this.agent = agentItinerary.agent;\n    this.distance = this.calcdistance();\n    this.durationMinutes = this.calcMinutes();\n     this.instructions.map(i=> this.adjustTimeFormat(i));\n  }\n  agent:agent;\n  instructions:instruction[];\n  get startingPoint():string{\n    return this.instructions[2].itineraryItem.name;\n  }\n  filterInstructions(instructions:instruction[]):instruction[]{\n    if(instructions[0].instructionType=='LeaveFromStartPoint'){\n      return Enumerable.from(instructions).skip(2).toArray();\n    }\n    return instructions;\n  }\n  distance:number;\n  durationMinutes:number;\n  private calcdistance(){\n    let sum =0;\n    for(let i = 0; i<this.instructions.length;i++){\n      if(this.instructions[i].distance)\n        {\n          sum+=this.instructions[i].distance;\n        }\n    }\n    return sum*0.000621371;\n  }\n  private adjustTimeFormat(instruction:instruction){\n    instruction.startTime = instruction.startTime.replace('P', 'T').replace('A','T');\n  }\n  private calcMinutes(){\n   let diff = new dateDiff(new Date(this.instructions[this.instructions.length-1].startTime), new Date(this.instructions[2].startTime));\n    return diff.minutes();\n  }\n  recalculateDuration(){\n  this.instructions.map(i=> this.adjustTimeFormat(i));\n   this.durationMinutes = this.calcMinutes();\n  }\n  get condensedInstructions():condensedInstruction[]{\n    let condensed = new Array<condensedInstruction>();\n    var mileCount = 0;\n    var first = true;\n     let skip = 1;\n      if(this.instructions[0].instructionType==\"LeaveFromStartPoint\" && this.instructions[0].distance)\n        {\n          skip = 2;\n        }\n    for(let index = skip; index<this.instructions.length-1;index++){\n      let visit = this.instructions[index];\n     // let travel = this.instructions[index+1];\n      if(visit.instructionType=='VisitLocation'){\n      condensed.push({agent:this.agent.name, startTime:visit.startTime, endTime:visit.endTime, location: visit.itineraryItem ? visit.itineraryItem.name : '',\n      miles:mileCount, passengers:visit.itineraryItem.quantity[0]});\n      }\n      else{\n        if(first){\n          mileCount=0;\n          first=false;\n          continue;\n        }\n      mileCount+=visit.distance*0.000621371;\n      }\n    }\n    var arrival = this.instructions[this.instructions.length-1];\n    condensed.push({agent:this.agent.name, startTime:arrival.startTime, location: this.endLocationName,\n      miles:mileCount, passengers:0})\n    return condensed;\n  }\n}\nexport interface agentItinerary {\n  agent: agent;\n  instructions: instruction[];\n}\nexport interface resource {\n  agentItineraries: agentItinerary[];\n  unscheduledItems:IitineraryItem[];\n  callbackUrl:string;\n  callbackInSeconds:number;\n}\nexport interface resourceSet {\n  resources: resource[];\n}\nexport interface IItinineraryResponse {\n  resourceSets: resourceSet[];\n  instructionSets:instructionSet[];\n  readjustForArrival(date:Date);\n  condensedInstructionSet:condensedInstructionSet;\n}\nexport class ItinineraryResponse implements IItinineraryResponse{\n  public instructionSets:instructionSet[];\n  public condensedInstructionSet:condensedInstructionSet;\n  public citiesVisited:Array<string>;\n  public citiesMissed:Array<missedCity>;\n\n  constructor(public resourceSets: resourceSet[], public destinationName:string){\n    this.instructionSets = Enumerable.from(this.resourceSets[0].resources[0].agentItineraries).where(i=>i.instructions.length>3).toArray()\n    .map(i=> {\n          return new instructionSet(i, destinationName);\n    });\n    var instructionsSetsLinq = Enumerable.from(this.instructionSets);\n    var orderedInstructions = instructionsSetsLinq.selectMany(i=>i.condensedInstructions).orderBy(i=>i.startTime).toArray();\n    this.citiesVisited = instructionsSetsLinq.selectMany(i=>i.condensedInstructions).selectMany(i=>i.location).distinct().toArray();\n    this.citiesMissed = Enumerable.from(this.resourceSets[0].resources[0].unscheduledItems).select(i=> {return {city: i.name, riders:i.quantity[0]}}).toArray();\n    var duration = instructionsSetsLinq.max(i=>i.durationMinutes);\n    this.condensedInstructionSet = new condensedInstructionSet(orderedInstructions, destinationName, duration, instructionsSetsLinq.min(i=>i.distance), instructionsSetsLinq.max(i=>i.distance),duration, instructionsSetsLinq.max(i=>i.durationMinutes), this.citiesMissed);\n  }\n   add_minutes(dt:Date, minutes:number):Date {\n    return new Date(dt.getTime() + minutes*60000);\n  }\n  readjustForArrival(date:Date){\n    Enumerable.from(this.condensedInstructionSet.condensedInstructions).groupBy(i=>i.agent)\n      .forEach(condensedInstructionAgent=>{\n          let lastInstruction = condensedInstructionAgent.last();\n          let endTime =new Date(lastInstruction.startTime);\n          console.log(\"Readjusting for end time: \"+endTime);\n          console.log(\"dateDiff:\"+dateDiff);\n          let diff:number =  new dateDiff(date, endTime).minutes()-1;\n          console.log(`Got difference between '${date}' and ${lastInstruction.startTime} as ${diff}`);\n          condensedInstructionAgent.forEach(condensedInstruction=>{\n            console.log(`Changing start time for instruction '${condensedInstruction.startTime}'`);\n            console.log(\"Readjusting for instruction set:\"+JSON.stringify(condensedInstruction));\n            let date = new Date(condensedInstruction.startTime);\n            console.log(`Changing start time for instruction date:'${date}'`);\n            let addmin = this.add_minutes(date, diff);\n            console.log(`Added '${diff}' minutes to ${date}:${addmin}`);\n            condensedInstruction.startTime = dateformat(addmin, 'yyyy-mm-ddThh:MM:ss');\n            if(condensedInstruction.endTime){\n              date = new Date(condensedInstruction.endTime);\n              addmin = this.add_minutes(date, diff);\n              condensedInstruction.endTime = dateformat(addmin, 'yyyy-mm-ddThh:MM:ss');\n              console.log(`Set startTime to ${condensedInstruction.startTime}`);        \n            }\n      });\n  });\n  }\n}\nexport class ItineraryRequest implements IItineraryRequest {\n  constructor(\n    public agents: agent[],\n    public itineraryItems: IitineraryItem[]\n  ) {}\n}\nexport interface getItineraryRequest {\n  searchParams: ISearchParam[];\n  startLocation: ILatLong;\n  endLocation: ILatLong;\n  dwellTime: number;\n  startTime?:Date;\n  endTime?:Date;\n  numAgents:number;\n  endLocationName:string;\n  busCapacity:number;\n}\nexport interface IItineraryService{\n  getItinerary(\n    getItineraryRequest: getItineraryRequest\n  ): Promise<IItinineraryResponse>;\n}\nexport interface ItinerariesRequest {\n  searchResults: ISearchParam[];\n  endLocation: ILatLong;\n  endLocationName:string;\n  dwellTime: number;\n  minBuses:number;\n  maxBuses:number;\n  busCapacity:number;\n}\nexport interface ItinerariesResponse {\n  itineraries:IItinineraryResponse[];\n}\n","import * as request from \"request-promise\";\nimport dateformat from 'dateformat';\nimport {Semaphore} from 'await-semaphore';\nimport { IItineraryService, getItineraryRequest, IItinineraryResponse, itineraryItem, ItineraryRequest, ItinineraryResponse } from \"./itinerary\";\nexport class ItineraryService implements IItineraryService {\n  semaphore = new Semaphore(7);\n  constructor(private key:string='ArLJodQ7fEaQ2dfy3lIHWJrJILC35_Qj0EpT8TCy3ls96pl6sqCdlu18bo8j_tbM'){\n    \n  }\n  async getItinerary(getItineraryRequest: getItineraryRequest): Promise<IItinineraryResponse> {\n    var itineraryItems = getItineraryRequest.searchParams.map(sr => new itineraryItem(sr.SearchResult!, \"00:\" + getItineraryRequest.dwellTime + \":00\", {\n      latitude: sr.Coords!.Lat,\n      longitude: sr.Coords!.Long, \n    },[sr.Riders!]));\n    /*itineraryItems.push(new itineraryItem('Destination', \"00:15:00\", {\n      latitude: getItineraryRequest.endLocation.Lat,\n      longitude: getItineraryRequest.endLocation.Long\n    }, '2019-11-16T16:00:00', '2019-11-16T18:00:00'));*/\n    console.log(\"Searching for start time:\"+getItineraryRequest.startTime);\n    let startTime = getItineraryRequest.startTime==undefined? \"2019-11-16T08:00:00\" : dateformat(getItineraryRequest.startTime, 'yyyy-mm-ddThh:MM:ss');\n    let endTime = getItineraryRequest.endTime==undefined?\"2019-11-16T18:00:00\" : dateformat(getItineraryRequest.endTime, 'yyyy-mm-ddThh:MM:ss');\n    startTime = startTime.replace('P', 'T').replace('A','T');\n    endTime = endTime.replace('P', 'T').replace('A','T');\n    var agents = new Array();\n    var maxAgents = getItineraryRequest.numAgents;\n    //TODO:Change for biz version\n    if(getItineraryRequest.numAgents>3){\n      maxAgents = 3;\n    }\n    for(var agentCount=0; agentCount<maxAgents; agentCount++){\n      agents.push({\n          capacity:[getItineraryRequest.busCapacity],\n          name: 'Bus_'+(agentCount+1),\n          shifts: [\n            {\n              startTime: startTime,\n              endTime: endTime,\n              endLocation: {\n                latitude: getItineraryRequest.endLocation.Lat,\n                longitude: getItineraryRequest.endLocation.Long\n              },\n              startLocation: {\n                latitude: getItineraryRequest.startLocation.Lat,\n                longitude: getItineraryRequest.startLocation.Long\n              }\n            }\n          ]\n        });\n    }\n    \n   /* var result = await request.post(\"https://dev.virtualearth.net/REST/V1/Routes/OptimizeItinerary?key=\"+this.key, {\n      resolveWithFullResponse: false,\n      json: new ItineraryRequest(agents, itineraryItems)\n    });*/\n    var release = await this.semaphore.acquire();\n     var result = await request.post(\"https://dev.virtualearth.net/REST/V1/Routes/OptimizeItineraryAsync?key=\"+this.key, {\n      resolveWithFullResponse: false,\n      json: new ItineraryRequest(agents, itineraryItems)\n    });\n    var itineraryResponse = (<IItinineraryResponse>result);\n     console.log(JSON.stringify(itineraryResponse));\n    \n    var callbackUrl = itineraryResponse.resourceSets[0].resources[0].callbackUrl;\n    var callbackTimeout = itineraryResponse.resourceSets[0].resources[0].callbackInSeconds;\n    if(callbackUrl){\n    let promiseGetResponse = new Promise<IItinineraryResponse>((resolve, reject) => {\n    let wait;\n    var onTimeout =async () => {\n    console.log('invoking callback url');\n    \n      result = await request.get(callbackUrl);\n      itineraryResponse = (<IItinineraryResponse>JSON.parse(result));\n     callbackUrl = itineraryResponse.resourceSets[0].resources[0].callbackUrl;\n      console.log(JSON.stringify(itineraryResponse));\n      if(!callbackUrl)\n        {\n          clearTimeout(wait);\n          resolve(itineraryResponse);\n        }\n        else{\n          wait = setTimeout(onTimeout, callbackTimeout*1000);\n        }\n    };\n    wait = setTimeout(onTimeout, callbackTimeout*1000);\n    });\n     return promiseGetResponse.then(i=> {\n       return new ItinineraryResponse((<IItinineraryResponse>JSON.parse(result)).resourceSets, getItineraryRequest.endLocationName);\n     }).finally(()=> release());\n    }\n   release();\n    return new ItinineraryResponse((<IItinineraryResponse>result).resourceSets, getItineraryRequest.endLocationName);\n  }\n}\n","import * as Enumerable from 'linq';\nimport { IItineraryService, ItinerariesRequest, ItinerariesResponse, IItinineraryResponse } from \"./itinerary\";\nimport { ISearchParam, ISearchResult } from '../Controls/enterLocationControl';\nexport interface IItineraryCollectionService{\n  getItineraries(getItinerariesRequest: ItinerariesRequest): Promise<ItinerariesResponse>;\n} \nexport class ItineraryCollectionService implements IItineraryCollectionService{\n  constructor(private itinerary: IItineraryService) {\n  }\n   addExtraStops(getItinerariesRequest:ItinerariesRequest){\n      let additionalStops = new Array<ISearchParam>();\n      for(let searchResult of getItinerariesRequest.searchResults){\n        if(searchResult.Riders!>getItinerariesRequest.busCapacity){\n          let riders = searchResult.Riders!;\n          let numAdditionalStops = Math.floor(riders/getItinerariesRequest.busCapacity);\n          let leftOver = riders%getItinerariesRequest.busCapacity;\n          if(leftOver==0){\n            numAdditionalStops--;\n          }\n          searchResult.Riders = getItinerariesRequest.busCapacity;\n          let additionalStop = {...searchResult};\n          for(let addStops = 1; addStops<=numAdditionalStops; addStops++){\n            additionalStops.push(additionalStop);\n          }\n          if(leftOver!=0){\n            additionalStops[additionalStops.length-1].Riders = leftOver;\n          }\n        }\n      }\n      additionalStops.forEach(i=> getItinerariesRequest.searchResults.push(i));\n   }\n  async getItineraries(getItinerariesRequest: ItinerariesRequest): Promise<ItinerariesResponse> {\n    this.addExtraStops(getItinerariesRequest);\n    let response = new Array<Promise<IItinineraryResponse>>();\n    for(var numAgents = getItinerariesRequest.minBuses; numAgents<= getItinerariesRequest.maxBuses; numAgents++){\n    for (let result of getItinerariesRequest.searchResults) {\n      let startDate =new Date(2019,11,17,10,0);\n      let endDate =new Date(2019,11,18,22,0);\n      \n      let itinerary = this.itinerary.getItinerary({numAgents:numAgents,endLocationName:getItinerariesRequest.endLocationName,\n        startLocation: result.Coords!, searchParams: getItinerariesRequest.searchResults,\n        dwellTime: getItinerariesRequest.dwellTime, endLocation: getItinerariesRequest.endLocation,\n        startTime:result.StartTime, endTime:result.EndTime,busCapacity:getItinerariesRequest.busCapacity\n      });\n      response.push(itinerary);\n    }\n    }\n    let responses = new Array<IItinineraryResponse>();\n    await Promise.all(response.map(m=>m.then(r=>responses.push(r))));\n    let keys = new Set<string>();\n    let responsesFiltered = new Array<IItinineraryResponse>();\n    for(let response of responses){\n      let key = response.condensedInstructionSet.durationMinutes+'_'+response.condensedInstructionSet.totalMiles+'_'+response.condensedInstructionSet.condensedInstructions.length;\n      if(!keys.has(key)){\n        responsesFiltered.push(response);\n        keys.add(key);\n      }\n    }\n    \n    let returnedValue = {\n      itineraries: Enumerable.from(responsesFiltered).\n        where(i=>i.instructionSets!==undefined)\n        .orderByDescending(i=>i.instructionSets.length)\n        .thenBy(i=>Enumerable.from( i.instructionSets).max(m=>m.durationMinutes)).select(i=>i).toArray()\n  };\n  return returnedValue;\n}\n}\n","import * as React from \"react\";\nimport DateTimePicker from \"react-datetime-picker\";\nimport * as dateMath from 'date-arithmetic';\nimport {ItinerariesResponse} from '../Services/itinerary';\nimport { InstructionSummaryControl } from \"./instructionSummaryControl\";\ninterface ItinerariesControlState{\n    Arrivaltime:Date;\n}\nexport interface ItinerariesControlProps{\n    ItinerariesResponse?:ItinerariesResponse;\n}\nexport class ItinerariesControl extends React.Component<ItinerariesControlProps,ItinerariesControlState>{\n    constructor(props){\n        super(props);\n        let endOfToday = dateMath.endOf(new Date(),'day');\n        let ninePm = dateMath.add(endOfToday, 20, \"hours\");\n        let subtractDay = dateMath.add(ninePm, -1, \"day\");\n     \n        this.state = {  Arrivaltime: dateMath.add(subtractDay, 1, \"minutes\")};\n        this.handleArrivalTimeChanged = this.handleArrivalTimeChanged.bind(this);\n     }\n    handleArrivalTimeChanged(date:Date){\n        this.setState({Arrivaltime:date});\n      }\nrender(){\n    if(!this.props.ItinerariesResponse)\n        return <div/>\n        let responseList;\n        let instructionList  = this.props.ItinerariesResponse.itineraries.map(m=>\n         <li> <InstructionSummaryControl condensedInstructionSet = {m.condensedInstructionSet}/></li>);\n         responseList = <ol>{instructionList}</ol>;\n    return <div>\n        <h1>Itineraries:</h1>\n        <ol>{responseList}</ol>\n  </div>\n}\n}","import * as React from \"react\";\nimport * as NumericInput from \"react-numeric-input\";\nimport update from 'immutability-helper';\nimport { Guid } from 'guid-typescript';\nexport interface IBusCapacityControlProps{\n    handleBusCapacityChanged:(capacities:Array<CapacityKey>)=>void;\n}\nexport interface CapacityKey{\n    capacity:number;\n    key:string;\n    index:number;\n}\nexport interface IBusCapacityControlState{\n    capacities:Array<CapacityKey>;\n}\nexport class BusCapacityControl extends React.Component<IBusCapacityControlProps, IBusCapacityControlState>{\n    constructor(props:IBusCapacityControlProps){\n        super(props);\n        this.handleBusCapacityChanged = this.handleBusCapacityChanged.bind(this);\n        this.handleAddBus = this.handleAddBus.bind(this);\n        let state ={capacities:new Array()};\n        state.capacities.push({capacity:50, key:Guid.create().toString(), index:0});\n        this.state = state;\n        \n    }\n    handleBusCapacityChanged(e, cap){\n        var state = this.state;\n        state = update(state, {capacities:{[cap.index]:{$set:{capacity: e, index:cap.index, key:cap.key}}}});\n        this.setState(state, ()=>this.props.handleBusCapacityChanged(this.state.capacities));\n    }\n    handleAddBus(){\n        var state = this.state;\n        const initialArray = [1, 2, 3];\n        const newArray = update(initialArray, {$push: [4]});\n        update(state, {capacities:{$push:[{capacity:50, key:Guid.create.toString(), index:this.state.capacities.length}]}});\n        this.setState(state, ()=>this.props.handleBusCapacityChanged(this.state.capacities));\n    }\n    render(){\n        let numericInputs = this.state.capacities.map(i=> {\n           return <NumericInput value={i.capacity} key={i.key} onChange={(e)=> this.handleBusCapacityChanged(e, i.index)} max={100} min={1}/> \n        });\n        return    (<div><div>Enter bus capacity:</div>\n        {numericInputs}\n        <input type=\"submit\" value=\"Add bus\" onClick={this.handleAddBus}/>\n   </div>);\n  \n    }\n}","import * as React from \"react\";\nimport * as NumericInput from \"react-numeric-input\";\nimport { LocationRiderCollectionControl } from \"./locationRiderCollectionControl\";\nimport { ISearchResult, ISearchParam, SearchParam } from \"./enterLocationControl\";\nimport { IItinineraryResponse, instructionSet, IItineraryService, ItinerariesResponse } from \"../Services/itinerary\";\nimport { EnterLocationControl } from \"./enterLocationControl\";\nimport { ItineraryInstructionsControl } from \"./itineraryInstructionsControl\";\nimport { InstructionSummaryControl } from \"./instructionSummaryControl\";\nimport { ItineraryService } from \"../Services/ItineraryService\";\nimport { ItineraryCollectionService } from \"../Services/ItineraryCollectionService\";\nimport DateTimePicker from \"react-datetime-picker\";\nimport * as dateMath from 'date-arithmetic';\nimport { ItinerariesControl } from \"./itinerariesControl\";\nimport { ILocationRider } from \"./locationRiderControl\";\nimport Enumerable from \"linq\";\nimport { BusCapacityControl, CapacityKey } from \"./BusCapacityControl\";\ninterface IDisplayItinerariesState {\n  SearchResults?: ISearchParam[];\n  Destination?: ISearchResult;\n  ItineraryResponse?: IItinineraryResponse;\n  ItinerariesResponse?:ItinerariesResponse; \n  DwellTime?: number;\n  Arrivaltime:Date;\n  MinBuses:number;\n  MaxBuses:number;\n  BusCapacity:number,\n  Loading:boolean,\n  CanSubmit:boolean,\n  BusCapacities?:Array<CapacityKey>\n}\nexport interface visibility{\n  visibility:'visible'|'hidden';\n}\nexport function boolVis(isVisible:boolean):visibility{\n  \n  return {visibility: isVisible ? 'visible':'hidden'}\n}\nexport class LandingPageControl extends React.Component<\n  {},\n  IDisplayItinerariesState\n> {\n  constructor(props) {\n    super(props);\n    this.itinerary = new ItineraryService();\n    this.itineraryCollection = new ItineraryCollectionService(this.itinerary);\n    this.handleDestinationChanged = this.handleDestinationChanged.bind(this);\n\n    this.state = { DwellTime: 15, Arrivaltime: this.initializeArrivalTime(), MinBuses:1, MaxBuses:3, BusCapacity:50, Loading:false, CanSubmit:false};\n    this.handleDwellTimeChanged = this.handleDwellTimeChanged.bind(this);\n    //this.handleSingleItinerarySearch = this.handleSingleItinerarySearch.bind(this);\n    this.handleMultipleItinerarySearch = this.handleMultipleItinerarySearch.bind(this);\n    this.handleSearchItineraries = this.handleSearchItineraries.bind(this);\n    this.handleReadjustForArrival = this.handleReadjustForArrival.bind(this);\n    this.handleArrivalTimeChanged = this.handleArrivalTimeChanged.bind(this);\n    this.handleMinBusesChanged = this.handleMinBusesChanged.bind(this);\n    this.handleMaxBusesChanged = this.handleMaxBusesChanged.bind(this);\n    this.handleBusCapacityChanged = this.handleBusCapacityChanged.bind(this);\n    this.handleBusCapacitiesChanged = this.handleBusCapacitiesChanged.bind(this);\n  }\n  initializeArrivalTime(){\n    let endOfToday = dateMath.endOf(new Date(),'day');\n    let ninePm = dateMath.add(endOfToday, 20, \"hours\");\n    let subtractDay = dateMath.add(ninePm, -1, \"day\");\n    return dateMath.add(subtractDay, 1, \"minutes\");\n  }\n  itineraryCollection: ItineraryCollectionService;\n  itinerary: IItineraryService;\n  render() {\n    let responseList;\n    if (\n      this.state &&\n      this.state.ItinerariesResponse\n    ){\n      //TODO:Break this out into it's own control\n      let instructionList  = this.state.ItinerariesResponse.itineraries.map(m=>\n     <li><InstructionSummaryControl condensedInstructionSet = {m.condensedInstructionSet}/></li>);\n      responseList = <ol>{instructionList}</ol>;\n    }\n    return (<div>\n        <div>\n          Enter destination:\n          <div>\n          <EnterLocationControl\n            SearchResult={{\n              SearchQuery: \"\",\n              SearchResult: undefined\n            }}\n            searchResultsChanged={this.handleDestinationChanged}\n          /></div>\n        </div>\n        <div>\n          Enter dwell time:\n          <br />\n          <NumericInput\n            value={this.state.DwellTime} max={120}\n            onChange={this.handleDwellTimeChanged}\n          />\n        </div>\n         Enter arrival time:\n    <br />\n    <DateTimePicker\n      value={this.state.Arrivaltime}\n      onChange={this.handleArrivalTimeChanged}\n    />\n    <div>\n    Enter min buses:</div>\n    <NumericInput value={this.state.MinBuses} onChange={this.handleMinBusesChanged} min={1} max={3}/>\n    <div>Enter max buses:</div>\n    <NumericInput min={1} max={3} value={this.state.MaxBuses}  onChange={this.handleMaxBusesChanged}/>\n     <div>Enter bus capacity:</div>\n   <NumericInput value={this.state.BusCapacity}  onChange={this.handleBusCapacityChanged} max={100} min={1} />\n    <BusCapacityControl handleBusCapacityChanged={this.handleBusCapacitiesChanged} />\n        <LocationRiderCollectionControl handleLocationRidersChanged={(e)=>this.handleLocationRidersChanged(e)}\n        />\n        <button  onClick={()=>this.handleSearchItineraries()} disabled={!this.state.CanSubmit}>Search</button>\n       <div style={{visibility: this.state.Loading ? 'visible': 'hidden'}}>Loading...</div>\n       <ItinerariesControl ItinerariesResponse={this.state.ItinerariesResponse}/>\n      </div>\n    )\n  }\n  handleBusCapacitiesChanged(e){\n    this.setState({BusCapacities:e});\n  }\n  handleBusCapacityChanged(e){\n    this.setState({BusCapacity:e});\n  }\n  handleMinBusesChanged(e){\n    this.setState({MinBuses:e});\n  }\n  \n  handleMaxBusesChanged(e){\n    this.setState({MaxBuses:e});\n  }\n\n  handleLocationRidersChanged(locationRiders:ILocationRider[]){\n   var result = Enumerable.from(locationRiders).select((val)=>new SearchParam(val.SearchResult!, val.NumRiders!, val.Coords!)).toArray();\n   this.setState({SearchResults:result});\n   if(this.state.Destination){\n     this.setState({CanSubmit: true});\n   }\n  }\n\n  handleArrivalTimeChanged(date:Date){\n    this.setState({Arrivaltime:date});\n  }\n\n  searchResultHashmap={};\n  handleReadjustForArrival(date:Date){\n    var searchResultHashmap = this.searchResultHashmap;\n    var research = false;\n    this.state.SearchResults!.forEach(i=>{\n      let existingDuration = searchResultHashmap[i.SearchResult!];\n      if(existingDuration){\n        research = true;\n      }\n      let duration:number = existingDuration;\n      \n     // duration+=2;\n      let startTime = dateMath.add(date, -duration, \"minutes\");\n      i.StartTime = startTime;\n      i.EndTime = dateMath.add(startTime, 1, \"day\");\n    });\n    if(research)\n    {\n      this.handleSearchItineraries(true);\n    }\n  }\n  handleReadjustForArrivalBySubtractDuration(date:Date){\n    console.log('Readjusting for arrival date:'+date.toString());\n    var response = this.state.ItinerariesResponse!\n    response.itineraries.forEach(it=>{\n      it.readjustForArrival(date);\n    });\n    this.setState({ItinerariesResponse:undefined}, ()=>this.setState({ItinerariesResponse:response}));\n  }\n  /*\n  handleSingleItinerarySearch(searchResults:ISearchResult[]){\n    this.itinerary\n              .getItinerary({\n                dwellTime: this.state.DwellTime!,\n                searchParams: searchResults,\n                startLocation: searchResults[0].Coords!,\n                endLocation: this.state.Destination!.Coords!\n              })\n              .then((i: IItinineraryResponse) => {\n                this.setState({ ItineraryResponse: i });\n                i.instructionSets.forEach(is=>{\n                  this.searchResultHashmap[is.startingPoint] = is.durationMinutes;\n                });\n              });\n            }*/\n  handleMultipleItinerarySearch(searchResults:ISearchResult[]){\n    this.setState({SearchResults:searchResults});\n  }\n  handleSearchItineraries(skipReadjust:boolean=false){\n    this.setState({Loading:true});\n    this.itineraryCollection.getItineraries({\n      dwellTime: this.state.DwellTime!,\n      searchResults: this.state.SearchResults!,\n      endLocation: this.state.Destination!.Coords!,\n      endLocationName:this.state.Destination!.SearchResult!,\n      minBuses:this.state.MinBuses,\n      maxBuses:this.state.MaxBuses,\n      busCapacity:this.state.BusCapacity\n    }) \n    .then((i: ItinerariesResponse) => {\n      this.setState({ ItinerariesResponse: i });\n      i.itineraries.forEach(it=>{it.instructionSets.forEach(is=>{\n        this.searchResultHashmap[is.startingPoint] = is.durationMinutes;\n      });});\n    }).then(()=>{\n      if(!skipReadjust)\n        this.handleReadjustForArrivalBySubtractDuration(this.state.Arrivaltime);\n    }).finally(()=>this.setState({Loading:false}));\n  }\n  handleDestinationChanged(e: ISearchResult) {\n    console.log(\"handle destination changed:\" + JSON.stringify(e));\n    this.setState({ Destination: e });\n  }\n  handleDwellTimeChanged(event) {\n    this.setState({ DwellTime: event.target.value });\n  }\n}\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\n//import { SearchControl } from \"./searchControl\";\r\nimport { LocationRiderCollectionControl } from \"./Controls/locationRiderCollectionControl\";\r\nimport { MapsControl } from \"./mapsContol\";\r\nimport { ISearchResult } from \"./Controls/enterLocationControl\";\r\nimport { LandingPageControl } from \"./Controls/LandingPageControl\";\r\n\r\nfunction App() {\r\n  return (\r\n    \r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox Test</h1>\r\n      <h2>Enter locations</h2>\r\n      \r\n    <LandingPageControl/>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}